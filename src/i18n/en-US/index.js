export default {
  about_app: 'About App',
  alpine: 'Alpine',
  add_todo: 'Add new Todo',
  also_provides: 'which also provides the ',
  and: 'and',
  and_uses: ' and uses ',
  appearance: 'Appearance',
  app_theme: 'App Theme',
  are_you_sure: 'Are you sure you want to delete ',
  at: 'at',
  boilerplate: 'This app is a boilerplate starting point for developing your own great app.',
  built_on: 'This app is built on the ',
  built_on2: ' framework which can build a website, an Android APK, an IOS app, or a desktop app from the same codebase.',
  cancel: 'Cancel',
  created_by: 'Created by',
  enter_name: 'Please enter a name',
  event_driven: 'Event driven State Management',
  edit: 'Edit',
  default: 'Default',
  delete: 'Delete',
  failed: 'Action failed',
  fast_dev: 'Fast Development => the entire tech stack is written in JavaScript; one language to build servers, databases, and mobile views as well as the usual website scripting. Hot reloading speeds your develpment process and minimizes mistakes. Working code examples of the features allow you to get right into development rather than researching syntax.',
  forest: 'Forest',
  front_end: 'The front end implements the ',
  greyscale: 'Greyscale',
  helping: 'Helping you to develop superior user experiences with minimal configuration and overhead, this simple Todo List app packs a lot of features.',
  home: 'Home',
  home01: 'This is a demonstration of app data management driven by websocket events. To see this in action, open the app in two separate windows. Notice the actions of one are reflected in the other. Spooky action at a distance!',
  home02: 'The event loop begins from within a Vue component. By using the \'vue-native-websocket-vue3\' npm package as a Quasar plugin, every component in the app has access to send websocket messages to the server.',
  home03: 'Quasar plugin code is in ',
  home04: 'and registered at ~ line 32 of ',
  home05: 'Socket handler is in script setup of ',
  home06: 'A socket instance can be found in script setup of ',
  home07: 'The server is an instance of the \'ws\' npm module.  This module processes the data then responds with a message to each connected client.  This middleware section is currently blank, allowing you to implement whatever server side handling your use case requires.  A mongo implementation can be found in the mongo fork of the github repository.  Because there is no data persistence, the app forces the state to reinitiate on each new client connection (otherwise there would be no state integrity).',
  home08: 'The websocket server is located in ',
  home09: 'The server controllers are in ',
  home10: 'Each client has a storeController to handle incoming socket messages.  This controller then calls a Pinia store action to update the state.  This Pinia store is bound to the Vue components, which update their view as the state changes.',
  home11: 'The client socket contorllers are in ',
  home12: 'The Pinia stores are also in ',
  lang_label: 'English',
  language: 'Language',
  info: 'Info',
  instant_network: 'Instant Network => a real time network of users connected via websockets, the app is entirely event driven and designed to be responsive, scalable and secure.',
  june: 'June',
  lg: 'Large',
  made_with: 'made with =>',
  md: 'Medium',
  success: 'Action was successful',
  of: ' of ',
  on: 'on ',
  options: 'App Options',
  orange: 'Orange',
  servers_built: ' Servers are built using ',
  sm: 'Small',
  state_management: ' state management ',
  text_size: 'Text Size',
  titlebar_text: 'Quasar Template => Websockets & Pinia w/ i18n',
  todo: 'Todo',
  todos: 'Todos',
  todo_list: 'Todo List',
  xl: 'Extra Large',
  you_have: 'You currently have '
}
